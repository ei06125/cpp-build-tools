#!/bin/bash

# =============================================================================
# Fun Fact: we can use the following shebang line for cross-compiling:
# /* #!/bin/bash; C:/Program\ Files/path/to/Git/usr/bin/sh.exe */
# according to https://www.youtube.com/watch?v=fMYv6-SZsSo
# =============================================================================

# ============================================================================
# Script setup
# ============================================================================

# get the directory where the script is located
THIS_SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
# import git utilities
GIT_UTILITIES_SCRIPT_PATH=$THIS_SCRIPT_DIR/../utils/utilities.sh
test -f $GIT_UTILITIES_SCRIPT_PATH || (echo "File not found: $GIT_UTILITIES_SCRIPT_PATH" && exit 1)
source $GIT_UTILITIES_SCRIPT_PATH || (echo "Failed to source $GIT_UTILITIES_SCRIPT_PATH" && exit 1)

# detect if this tools folder is a submodule or not
IS_SUBMODULE=$(git_is_submodule; echo $?)

# getting the root level directory of the project
PROJECT_ROOT_DIR=$(git rev-parse --show-toplevel)
if [[ $IS_SUBMODULE == 1 ]]; then
    cd "${PROJECT_ROOT_DIR}/.."
    PROJECT_ROOT_DIR=$(git rev-parse --show-toplevel)
fi

# import logger
source ${PROJECT_ROOT_DIR}/tools/scripts/utils/logger.sh

CMAKE_CURRENT_LOG_LEVEL=$CMAKE_LOG_LEVEL_TRACE

log_info "Running pre-commit hook..."

# =============================================================================
# Assert that git user's email is valid (under the company's domain)
# =============================================================================

# change `domain` to use your company's domain
domain="outlook.com"
usermail=$(git config user.email)
if [[ "$usermail" != *"@$domain" ]]; then
    log_fatal "Invalid username: $usermail! Please config git to use your company's email address."
    exit 1
fi

# # We could also check if the username is within a list of names

# ============================================================================
# Apply formatting to all cmake or cpp files that will be committed
# ============================================================================

log_warn "Apply formatting to all staged cmake or cpp files"
ALL_STAGED_FILES=`git diff --cached --name-only --diff-filter=ACM`
for file in ${ALL_STAGED_FILES}
do
    filename=$(basename -- "$file")
    extension=$([[ "$filename" = *.* ]] && echo ".${filename##*.}" || echo '')
    filename="${filename%.*}"
    
    log_debug "filename: $filename"
    log_debug "extension: $extension"
    
    if [[ "$extension" == ".cpp" || "$extension" == ".c" || "$extension" == ".hpp"  || "$extension" == ".h"  ]]; then
        log_trace "Applying clang-format to file $file"
        clang-format -i $file
        elif [[ "$extension" == ".cmake" ]]; then
        log_trace "Applying cmake-format to file $file"
        cmake-format -i $file -c .cmake-format.yaml 2>/dev/null
        elif [[ "$filename" == "CMakeLists" && "$extension" == ".txt" ]]; then
        log_trace "Applying cmake-format to file $file"
        cmake-format -i $file -c .cmake-format.yaml 2>/dev/null
    fi
    git add $file
done

# Love ChatGPT
CLEAN_BUILD=0
new_staged_cpp_files="$(git diff --cached --name-status | grep -E 'A' | grep -E '.*\.(cpp|h)$')"
log_debug "new_staged_cpp_files: $new_staged_cpp_files"
if [ -n "$new_staged_cpp_files" ]; then
    log_warn "Setting CLEAN_BUILD flag due to new or untracked C++ files"
    export CLEAN_BUILD=1
fi

deleted_staged_cpp_files="$(git diff --cached --name-only --diff-filter=D | grep -E '.*\.(cpp|h)$')"
log_debug "deleted_staged_cpp_files: $deleted_staged_cpp_files"
if [ -n "$deleted_staged_cpp_files" ]; then
    log_warn "Setting CLEAN_BUILD flag due to deleted C++ files"
    export CLEAN_BUILD=1
fi

# =============================================================================
# Run All Tests
# =============================================================================

if [[ $CLEAN_BUILD != 0 ]]; then
    ${PROJECT_ROOT_DIR}/tools/scripts/utils/runTests.sh -f
else
    ${PROJECT_ROOT_DIR}/tools/scripts/utils/runTests.sh
fi

if [[ "$?" != 0 ]]; then
    log_error "pre-commit tests - FAILED"
    exit 1
else
    log_info "pre-commit tests - DONE"
fi

# =============================================================================
# Clean up
# =============================================================================

# return to previous cwd
cd - 1> pre-commit.log
rm pre-commit.log
