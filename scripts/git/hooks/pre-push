#!/bin/bash

# =============================================================================
# Fun Fact: we can use the following shebang line for cross-compiling:
# /* #!/bin/bash; C:/Program\ Files/path/to/Git/usr/bin/sh.exe */
# according to https://www.youtube.com/watch?v=fMYv6-SZsSo
# =============================================================================

# ============================================================================
# Script setup
# ============================================================================

# get the directory where the script is located
THIS_SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"

# import git utilities
GIT_UTILITIES_SCRIPT_PATH=$THIS_SCRIPT_DIR/../utils/utilities.sh
test -f $GIT_UTILITIES_SCRIPT_PATH || (echo "File not found: $GIT_UTILITIES_SCRIPT_PATH" && exit 1)
source $GIT_UTILITIES_SCRIPT_PATH || (echo "Failed to source $GIT_UTILITIES_SCRIPT_PATH" && exit 1)

# detect if this tools folder is a submodule or not
IS_SUBMODULE=$(git_is_submodule; echo $?)

# getting the root level directory of the project
PROJECT_ROOT_DIR=$(git rev-parse --show-toplevel)
if [[ $IS_SUBMODULE == 1 ]]; then
    cd "${PROJECT_ROOT_DIR}/.."
    PROJECT_ROOT_DIR=$(git rev-parse --show-toplevel)
fi

# import logger
source ${PROJECT_ROOT_DIR}/tools/scripts/utils/logger.sh

log_info "Running pre-push hook..."

# =============================================================================
# Assert that git user's email is valid (under the company's domain)
# =============================================================================

# change `domain` to use your company's domain
domain="outlook.com"
usermail=$(git config user.email)
if [[ "$usermail" != *"@$domain" ]]; then
    log_fatal "Invalid username: $usermail! Please config git to use your company's email address."
    exit 1
fi

# We could also check if the username is within a list of names

# =============================================================================
# Clean
# =============================================================================

log_warn "Saving to stash"
git stash -u

# =============================================================================
# Run All Tests With Clean Build
# =============================================================================

$(pwd)/tools/scripts/utils/runTests.sh -f
if [[ "$?" != 0 ]]; then
    log_error "pre-push tests - FAILED"
    exit 1
else
    log_info "pre-push tests - DONE"
fi

# =============================================================================
# Clean up
# =============================================================================

# return to previous cwd
cd - 1> pre-push.log
rm pre-push.log

GIT_STASH_LIST=`git stash list`
if [[ "$GIT_STASH_LIST" != "" ]]; then
    log_warn "Loading from stash"
    git stash pop
fi
